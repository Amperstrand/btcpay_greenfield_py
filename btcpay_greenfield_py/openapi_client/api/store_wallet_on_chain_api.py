# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictInt, StrictStr

from typing import List, Optional, Union

from openapi_client.models.add_on_chain_wallet_object_link_request import AddOnChainWalletObjectLinkRequest
from openapi_client.models.create_on_chain_transaction_request import CreateOnChainTransactionRequest
from openapi_client.models.on_chain_wallet_address_data import OnChainWalletAddressData
from openapi_client.models.on_chain_wallet_fee_rate_data import OnChainWalletFeeRateData
from openapi_client.models.on_chain_wallet_object_data import OnChainWalletObjectData
from openapi_client.models.on_chain_wallet_overview_data import OnChainWalletOverviewData
from openapi_client.models.on_chain_wallet_transaction_data import OnChainWalletTransactionData
from openapi_client.models.on_chain_wallet_utxo_data import OnChainWalletUTXOData
from openapi_client.models.patch_on_chain_transaction_request import PatchOnChainTransactionRequest
from openapi_client.models.store_on_chain_wallets_create_on_chain_transaction200_response import StoreOnChainWalletsCreateOnChainTransaction200Response
from openapi_client.models.transaction_status import TransactionStatus

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class StoreWalletOnChainApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def store_on_chain_wallets_add_or_update_on_chain_wallet_link(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        add_on_chain_wallet_object_link_request: AddOnChainWalletObjectLinkRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Add/Update store on-chain wallet object link

        Add/Update wallet object link

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param add_on_chain_wallet_object_link_request: (required)
        :type add_on_chain_wallet_object_link_request: AddOnChainWalletObjectLinkRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_add_or_update_on_chain_wallet_link_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            add_on_chain_wallet_object_link_request=add_on_chain_wallet_object_link_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_add_or_update_on_chain_wallet_link_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        add_on_chain_wallet_object_link_request: AddOnChainWalletObjectLinkRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Add/Update store on-chain wallet object link

        Add/Update wallet object link

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param add_on_chain_wallet_object_link_request: (required)
        :type add_on_chain_wallet_object_link_request: AddOnChainWalletObjectLinkRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_add_or_update_on_chain_wallet_link_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            add_on_chain_wallet_object_link_request=add_on_chain_wallet_object_link_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_add_or_update_on_chain_wallet_link_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        add_on_chain_wallet_object_link_request: AddOnChainWalletObjectLinkRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add/Update store on-chain wallet object link

        Add/Update wallet object link

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param add_on_chain_wallet_object_link_request: (required)
        :type add_on_chain_wallet_object_link_request: AddOnChainWalletObjectLinkRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_add_or_update_on_chain_wallet_link_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            add_on_chain_wallet_object_link_request=add_on_chain_wallet_object_link_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_add_or_update_on_chain_wallet_link_serialize(
        self,
        crypto_code,
        object_id,
        object_type,
        store_id,
        add_on_chain_wallet_object_link_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if object_id is not None:
            _path_params['objectId'] = object_id
        if object_type is not None:
            _path_params['objectType'] = object_type
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if add_on_chain_wallet_object_link_request is not None:
            _body_params = add_on_chain_wallet_object_link_request



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/objects/{objectType}/{objectId}/links',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_add_or_update_on_chain_wallet_objects(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        on_chain_wallet_object_data: OnChainWalletObjectData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnChainWalletObjectData:
        """Add/Update store on-chain wallet objects

        Add/Update wallet objects

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param on_chain_wallet_object_data: (required)
        :type on_chain_wallet_object_data: OnChainWalletObjectData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_add_or_update_on_chain_wallet_objects_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            on_chain_wallet_object_data=on_chain_wallet_object_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletObjectData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_add_or_update_on_chain_wallet_objects_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        on_chain_wallet_object_data: OnChainWalletObjectData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnChainWalletObjectData]:
        """Add/Update store on-chain wallet objects

        Add/Update wallet objects

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param on_chain_wallet_object_data: (required)
        :type on_chain_wallet_object_data: OnChainWalletObjectData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_add_or_update_on_chain_wallet_objects_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            on_chain_wallet_object_data=on_chain_wallet_object_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletObjectData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_add_or_update_on_chain_wallet_objects_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        on_chain_wallet_object_data: OnChainWalletObjectData,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add/Update store on-chain wallet objects

        Add/Update wallet objects

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param on_chain_wallet_object_data: (required)
        :type on_chain_wallet_object_data: OnChainWalletObjectData
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_add_or_update_on_chain_wallet_objects_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            on_chain_wallet_object_data=on_chain_wallet_object_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletObjectData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_add_or_update_on_chain_wallet_objects_serialize(
        self,
        crypto_code,
        store_id,
        on_chain_wallet_object_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if on_chain_wallet_object_data is not None:
            _body_params = on_chain_wallet_object_data


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/objects',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_create_on_chain_transaction(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        create_on_chain_transaction_request: CreateOnChainTransactionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StoreOnChainWalletsCreateOnChainTransaction200Response:
        """Create store on-chain wallet transaction

        Create store on-chain wallet transaction

        :param crypto_code: The crypto code of the wallet (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param create_on_chain_transaction_request: (required)
        :type create_on_chain_transaction_request: CreateOnChainTransactionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_create_on_chain_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            create_on_chain_transaction_request=create_on_chain_transaction_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreOnChainWalletsCreateOnChainTransaction200Response",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_create_on_chain_transaction_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        create_on_chain_transaction_request: CreateOnChainTransactionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StoreOnChainWalletsCreateOnChainTransaction200Response]:
        """Create store on-chain wallet transaction

        Create store on-chain wallet transaction

        :param crypto_code: The crypto code of the wallet (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param create_on_chain_transaction_request: (required)
        :type create_on_chain_transaction_request: CreateOnChainTransactionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_create_on_chain_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            create_on_chain_transaction_request=create_on_chain_transaction_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreOnChainWalletsCreateOnChainTransaction200Response",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_create_on_chain_transaction_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        create_on_chain_transaction_request: CreateOnChainTransactionRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create store on-chain wallet transaction

        Create store on-chain wallet transaction

        :param crypto_code: The crypto code of the wallet (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param create_on_chain_transaction_request: (required)
        :type create_on_chain_transaction_request: CreateOnChainTransactionRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_create_on_chain_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            create_on_chain_transaction_request=create_on_chain_transaction_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StoreOnChainWalletsCreateOnChainTransaction200Response",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_create_on_chain_transaction_serialize(
        self,
        crypto_code,
        store_id,
        create_on_chain_transaction_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_on_chain_transaction_request is not None:
            _body_params = create_on_chain_transaction_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_get_on_chain_fee_rate(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        block_target: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnChainWalletFeeRateData:
        """Get store on-chain wallet fee rate

        Get wallet onchain fee rate

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param block_target: The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`
        :type block_target: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_fee_rate_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            block_target=block_target,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletFeeRateData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_get_on_chain_fee_rate_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        block_target: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnChainWalletFeeRateData]:
        """Get store on-chain wallet fee rate

        Get wallet onchain fee rate

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param block_target: The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`
        :type block_target: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_fee_rate_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            block_target=block_target,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletFeeRateData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_get_on_chain_fee_rate_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        block_target: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=1)], Annotated[int, Field(strict=True, ge=1)]]], Field(description="The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet fee rate

        Get wallet onchain fee rate

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param block_target: The number of blocks away you are willing to target for confirmation. Defaults to the wallet's configured `RecommendedFeeBlockTarget`
        :type block_target: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_fee_rate_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            block_target=block_target,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletFeeRateData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_get_on_chain_fee_rate_serialize(
        self,
        crypto_code,
        store_id,
        block_target,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        if block_target is not None:
            
            _query_params.append(('blockTarget', block_target))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/feerate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_object(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        include_neighbour_data: Annotated[Optional[StrictBool], Field(description="Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnChainWalletObjectData:
        """Get store on-chain wallet object

        View wallet object

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param include_neighbour_data: Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)
        :type include_neighbour_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_object_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            include_neighbour_data=include_neighbour_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletObjectData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_object_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        include_neighbour_data: Annotated[Optional[StrictBool], Field(description="Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnChainWalletObjectData]:
        """Get store on-chain wallet object

        View wallet object

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param include_neighbour_data: Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)
        :type include_neighbour_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_object_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            include_neighbour_data=include_neighbour_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletObjectData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_object_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        include_neighbour_data: Annotated[Optional[StrictBool], Field(description="Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet object

        View wallet object

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param include_neighbour_data: Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)
        :type include_neighbour_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_object_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            include_neighbour_data=include_neighbour_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletObjectData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_get_on_chain_wallet_object_serialize(
        self,
        crypto_code,
        object_id,
        object_type,
        store_id,
        include_neighbour_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if object_id is not None:
            _path_params['objectId'] = object_id
        if object_type is not None:
            _path_params['objectType'] = object_type
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        if include_neighbour_data is not None:
            
            _query_params.append(('includeNeighbourData', include_neighbour_data))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/objects/{objectType}/{objectId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_objects(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        ids: Annotated[Optional[List[StrictStr]], Field(description="The ids of objects to fetch, if used, type should be specified")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of object to fetch")] = None,
        include_neighbour_data: Annotated[Optional[StrictBool], Field(description="Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OnChainWalletObjectData]:
        """Get store on-chain wallet objects

        View wallet objects

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param ids: The ids of objects to fetch, if used, type should be specified
        :type ids: List[str]
        :param type: The type of object to fetch
        :type type: str
        :param include_neighbour_data: Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)
        :type include_neighbour_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_objects_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            ids=ids,
            type=type,
            include_neighbour_data=include_neighbour_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletObjectData]",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_objects_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        ids: Annotated[Optional[List[StrictStr]], Field(description="The ids of objects to fetch, if used, type should be specified")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of object to fetch")] = None,
        include_neighbour_data: Annotated[Optional[StrictBool], Field(description="Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OnChainWalletObjectData]]:
        """Get store on-chain wallet objects

        View wallet objects

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param ids: The ids of objects to fetch, if used, type should be specified
        :type ids: List[str]
        :param type: The type of object to fetch
        :type type: str
        :param include_neighbour_data: Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)
        :type include_neighbour_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_objects_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            ids=ids,
            type=type,
            include_neighbour_data=include_neighbour_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletObjectData]",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_objects_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        ids: Annotated[Optional[List[StrictStr]], Field(description="The ids of objects to fetch, if used, type should be specified")] = None,
        type: Annotated[Optional[StrictStr], Field(description="The type of object to fetch")] = None,
        include_neighbour_data: Annotated[Optional[StrictBool], Field(description="Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet objects

        View wallet objects

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param ids: The ids of objects to fetch, if used, type should be specified
        :type ids: List[str]
        :param type: The type of object to fetch
        :type type: str
        :param include_neighbour_data: Whether or not you should include neighbour's node data in the result (ie, `links.objectData`)
        :type include_neighbour_data: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_objects_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            ids=ids,
            type=type,
            include_neighbour_data=include_neighbour_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletObjectData]",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_get_on_chain_wallet_objects_serialize(
        self,
        crypto_code,
        store_id,
        ids,
        type,
        include_neighbour_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
            'ids': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if include_neighbour_data is not None:
            
            _query_params.append(('includeNeighbourData', include_neighbour_data))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/objects',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_receive_address(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        force_generate: Annotated[Optional[StrictBool], Field(description="Whether to generate a new address for this request even if the previous one was not used")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnChainWalletAddressData:
        """Get store on-chain wallet address

        Get or generate address for wallet

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param force_generate: Whether to generate a new address for this request even if the previous one was not used
        :type force_generate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_receive_address_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            force_generate=force_generate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletAddressData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_receive_address_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        force_generate: Annotated[Optional[StrictBool], Field(description="Whether to generate a new address for this request even if the previous one was not used")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnChainWalletAddressData]:
        """Get store on-chain wallet address

        Get or generate address for wallet

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param force_generate: Whether to generate a new address for this request even if the previous one was not used
        :type force_generate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_receive_address_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            force_generate=force_generate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletAddressData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_receive_address_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        force_generate: Annotated[Optional[StrictBool], Field(description="Whether to generate a new address for this request even if the previous one was not used")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet address

        Get or generate address for wallet

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param force_generate: Whether to generate a new address for this request even if the previous one was not used
        :type force_generate: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_receive_address_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            force_generate=force_generate,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletAddressData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_get_on_chain_wallet_receive_address_serialize(
        self,
        crypto_code,
        store_id,
        force_generate,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        if force_generate is not None:
            
            _query_params.append(('forceGenerate', force_generate))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/address',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_transaction(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        transaction_id: Annotated[StrictStr, Field(description="The transaction id to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnChainWalletTransactionData:
        """Get store on-chain wallet transaction

        Get store on-chain wallet transaction

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param transaction_id: The transaction id to fetch (required)
        :type transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            transaction_id=transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletTransactionData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_transaction_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        transaction_id: Annotated[StrictStr, Field(description="The transaction id to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnChainWalletTransactionData]:
        """Get store on-chain wallet transaction

        Get store on-chain wallet transaction

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param transaction_id: The transaction id to fetch (required)
        :type transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            transaction_id=transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletTransactionData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_transaction_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        transaction_id: Annotated[StrictStr, Field(description="The transaction id to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet transaction

        Get store on-chain wallet transaction

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param transaction_id: The transaction id to fetch (required)
        :type transaction_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            transaction_id=transaction_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletTransactionData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_get_on_chain_wallet_transaction_serialize(
        self,
        crypto_code,
        store_id,
        transaction_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        if transaction_id is not None:
            _path_params['transactionId'] = transaction_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions/{transactionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_utxos(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OnChainWalletUTXOData]:
        """Get store on-chain wallet UTXOS

        Get store on-chain wallet utxos

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_utxos_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletUTXOData]",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_utxos_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OnChainWalletUTXOData]]:
        """Get store on-chain wallet UTXOS

        Get store on-chain wallet utxos

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_utxos_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletUTXOData]",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_get_on_chain_wallet_utxos_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet UTXOS

        Get store on-chain wallet utxos

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_get_on_chain_wallet_utxos_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletUTXOData]",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_get_on_chain_wallet_utxos_serialize(
        self,
        crypto_code,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/utxos',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_patch_on_chain_wallet_transaction(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        transaction_id: Annotated[StrictStr, Field(description="The transaction id to fetch")],
        patch_on_chain_transaction_request: PatchOnChainTransactionRequest,
        force: Annotated[Optional[StrictStr], Field(description="Whether to update the label/comments even if the transaction does not yet exist")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnChainWalletTransactionData:
        """Patch store on-chain wallet transaction info

        Patch store on-chain wallet transaction info

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param transaction_id: The transaction id to fetch (required)
        :type transaction_id: str
        :param patch_on_chain_transaction_request: (required)
        :type patch_on_chain_transaction_request: PatchOnChainTransactionRequest
        :param force: Whether to update the label/comments even if the transaction does not yet exist
        :type force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_patch_on_chain_wallet_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            transaction_id=transaction_id,
            patch_on_chain_transaction_request=patch_on_chain_transaction_request,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletTransactionData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_patch_on_chain_wallet_transaction_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        transaction_id: Annotated[StrictStr, Field(description="The transaction id to fetch")],
        patch_on_chain_transaction_request: PatchOnChainTransactionRequest,
        force: Annotated[Optional[StrictStr], Field(description="Whether to update the label/comments even if the transaction does not yet exist")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnChainWalletTransactionData]:
        """Patch store on-chain wallet transaction info

        Patch store on-chain wallet transaction info

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param transaction_id: The transaction id to fetch (required)
        :type transaction_id: str
        :param patch_on_chain_transaction_request: (required)
        :type patch_on_chain_transaction_request: PatchOnChainTransactionRequest
        :param force: Whether to update the label/comments even if the transaction does not yet exist
        :type force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_patch_on_chain_wallet_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            transaction_id=transaction_id,
            patch_on_chain_transaction_request=patch_on_chain_transaction_request,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletTransactionData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_patch_on_chain_wallet_transaction_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        transaction_id: Annotated[StrictStr, Field(description="The transaction id to fetch")],
        patch_on_chain_transaction_request: PatchOnChainTransactionRequest,
        force: Annotated[Optional[StrictStr], Field(description="Whether to update the label/comments even if the transaction does not yet exist")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Patch store on-chain wallet transaction info

        Patch store on-chain wallet transaction info

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param transaction_id: The transaction id to fetch (required)
        :type transaction_id: str
        :param patch_on_chain_transaction_request: (required)
        :type patch_on_chain_transaction_request: PatchOnChainTransactionRequest
        :param force: Whether to update the label/comments even if the transaction does not yet exist
        :type force: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_patch_on_chain_wallet_transaction_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            transaction_id=transaction_id,
            patch_on_chain_transaction_request=patch_on_chain_transaction_request,
            force=force,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletTransactionData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_patch_on_chain_wallet_transaction_serialize(
        self,
        crypto_code,
        store_id,
        transaction_id,
        patch_on_chain_transaction_request,
        force,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        if transaction_id is not None:
            _path_params['transactionId'] = transaction_id
        # process the query parameters
        if force is not None:
            
            _query_params.append(('force', force))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_on_chain_transaction_request is not None:
            _body_params = patch_on_chain_transaction_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions/{transactionId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_remove_on_chain_wallet_link(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        link_id: Annotated[StrictStr, Field(description="The object id of the linked neighbour")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        link_type: Annotated[StrictStr, Field(description="The object type of the linked neighbour")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove store on-chain wallet object links

        Remove wallet object link

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param link_id: The object id of the linked neighbour (required)
        :type link_id: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param link_type: The object type of the linked neighbour (required)
        :type link_type: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_remove_on_chain_wallet_link_serialize(
            crypto_code=crypto_code,
            link_id=link_id,
            object_id=object_id,
            link_type=link_type,
            object_type=object_type,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_remove_on_chain_wallet_link_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        link_id: Annotated[StrictStr, Field(description="The object id of the linked neighbour")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        link_type: Annotated[StrictStr, Field(description="The object type of the linked neighbour")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove store on-chain wallet object links

        Remove wallet object link

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param link_id: The object id of the linked neighbour (required)
        :type link_id: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param link_type: The object type of the linked neighbour (required)
        :type link_type: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_remove_on_chain_wallet_link_serialize(
            crypto_code=crypto_code,
            link_id=link_id,
            object_id=object_id,
            link_type=link_type,
            object_type=object_type,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_remove_on_chain_wallet_link_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        link_id: Annotated[StrictStr, Field(description="The object id of the linked neighbour")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        link_type: Annotated[StrictStr, Field(description="The object type of the linked neighbour")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove store on-chain wallet object links

        Remove wallet object link

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param link_id: The object id of the linked neighbour (required)
        :type link_id: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param link_type: The object type of the linked neighbour (required)
        :type link_type: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_remove_on_chain_wallet_link_serialize(
            crypto_code=crypto_code,
            link_id=link_id,
            object_id=object_id,
            link_type=link_type,
            object_type=object_type,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_remove_on_chain_wallet_link_serialize(
        self,
        crypto_code,
        link_id,
        object_id,
        link_type,
        object_type,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if link_id is not None:
            _path_params['linkId'] = link_id
        if object_id is not None:
            _path_params['objectId'] = object_id
        if link_type is not None:
            _path_params['linkType'] = link_type
        if object_type is not None:
            _path_params['objectType'] = object_type
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/objects/{objectType}/{objectId}/links/{linkType}/{linkId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_remove_on_chain_wallet_object(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Remove store on-chain wallet objects

        Remove wallet object

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_remove_on_chain_wallet_object_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_remove_on_chain_wallet_object_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Remove store on-chain wallet objects

        Remove wallet object

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_remove_on_chain_wallet_object_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_remove_on_chain_wallet_object_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        object_id: Annotated[StrictStr, Field(description="The object id to fetch")],
        object_type: Annotated[StrictStr, Field(description="The object type to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Remove store on-chain wallet objects

        Remove wallet object

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param object_id: The object id to fetch (required)
        :type object_id: str
        :param object_type: The object type to fetch (required)
        :type object_type: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_remove_on_chain_wallet_object_serialize(
            crypto_code=crypto_code,
            object_id=object_id,
            object_type=object_type,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_remove_on_chain_wallet_object_serialize(
        self,
        crypto_code,
        object_id,
        object_type,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if object_id is not None:
            _path_params['objectId'] = object_id
        if object_type is not None:
            _path_params['objectType'] = object_type
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/objects/{objectType}/{objectId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_show_on_chain_wallet_overview(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OnChainWalletOverviewData:
        """Get store on-chain wallet overview

        View information about the specified wallet

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_show_on_chain_wallet_overview_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletOverviewData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_show_on_chain_wallet_overview_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OnChainWalletOverviewData]:
        """Get store on-chain wallet overview

        View information about the specified wallet

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_show_on_chain_wallet_overview_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletOverviewData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_show_on_chain_wallet_overview_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet overview

        View information about the specified wallet

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_show_on_chain_wallet_overview_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OnChainWalletOverviewData",
            '403': None,
            '404': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_show_on_chain_wallet_overview_serialize(
        self,
        crypto_code,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_show_on_chain_wallet_transactions(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        label_filter: Annotated[Optional[StrictStr], Field(description="Transaction label to filter by")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Maximum number of transactions to return")] = None,
        skip: Annotated[Optional[StrictInt], Field(description="Number of transactions to skip from the start")] = None,
        status_filter: Annotated[Optional[List[TransactionStatus]], Field(description="Statuses to filter the transactions with")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OnChainWalletTransactionData]:
        """Get store on-chain wallet transactions

        Get store on-chain wallet transactions

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param label_filter: Transaction label to filter by
        :type label_filter: str
        :param limit: Maximum number of transactions to return
        :type limit: int
        :param skip: Number of transactions to skip from the start
        :type skip: int
        :param status_filter: Statuses to filter the transactions with
        :type status_filter: List[TransactionStatus]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_show_on_chain_wallet_transactions_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            label_filter=label_filter,
            limit=limit,
            skip=skip,
            status_filter=status_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletTransactionData]",
            '403': None,
            '404': None,
            '503': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_show_on_chain_wallet_transactions_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        label_filter: Annotated[Optional[StrictStr], Field(description="Transaction label to filter by")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Maximum number of transactions to return")] = None,
        skip: Annotated[Optional[StrictInt], Field(description="Number of transactions to skip from the start")] = None,
        status_filter: Annotated[Optional[List[TransactionStatus]], Field(description="Statuses to filter the transactions with")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OnChainWalletTransactionData]]:
        """Get store on-chain wallet transactions

        Get store on-chain wallet transactions

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param label_filter: Transaction label to filter by
        :type label_filter: str
        :param limit: Maximum number of transactions to return
        :type limit: int
        :param skip: Number of transactions to skip from the start
        :type skip: int
        :param status_filter: Statuses to filter the transactions with
        :type status_filter: List[TransactionStatus]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_show_on_chain_wallet_transactions_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            label_filter=label_filter,
            limit=limit,
            skip=skip,
            status_filter=status_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletTransactionData]",
            '403': None,
            '404': None,
            '503': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_show_on_chain_wallet_transactions_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the wallet to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        label_filter: Annotated[Optional[StrictStr], Field(description="Transaction label to filter by")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Maximum number of transactions to return")] = None,
        skip: Annotated[Optional[StrictInt], Field(description="Number of transactions to skip from the start")] = None,
        status_filter: Annotated[Optional[List[TransactionStatus]], Field(description="Statuses to filter the transactions with")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get store on-chain wallet transactions

        Get store on-chain wallet transactions

        :param crypto_code: The crypto code of the wallet to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param label_filter: Transaction label to filter by
        :type label_filter: str
        :param limit: Maximum number of transactions to return
        :type limit: int
        :param skip: Number of transactions to skip from the start
        :type skip: int
        :param status_filter: Statuses to filter the transactions with
        :type status_filter: List[TransactionStatus]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_show_on_chain_wallet_transactions_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            label_filter=label_filter,
            limit=limit,
            skip=skip,
            status_filter=status_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OnChainWalletTransactionData]",
            '403': None,
            '404': None,
            '503': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_show_on_chain_wallet_transactions_serialize(
        self,
        crypto_code,
        store_id,
        label_filter,
        limit,
        skip,
        status_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
            'statusFilter': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        if label_filter is not None:
            
            _query_params.append(('labelFilter', label_filter))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if skip is not None:
            
            _query_params.append(('skip', skip))
            
        if status_filter is not None:
            
            _query_params.append(('statusFilter', status_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """UnReserve last store on-chain wallet address

        UnReserve address

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_with_http_info(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """UnReserve last store on-chain wallet address

        UnReserve address

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_without_preload_content(
        self,
        crypto_code: Annotated[StrictStr, Field(description="The crypto code of the payment method to fetch")],
        store_id: Annotated[StrictStr, Field(description="The store to fetch")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """UnReserve last store on-chain wallet address

        UnReserve address

        :param crypto_code: The crypto code of the payment method to fetch (required)
        :type crypto_code: str
        :param store_id: The store to fetch (required)
        :type store_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_serialize(
            crypto_code=crypto_code,
            store_id=store_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _store_on_chain_wallets_un_reserve_on_chain_wallet_receive_address_serialize(
        self,
        crypto_code,
        store_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if crypto_code is not None:
            _path_params['cryptoCode'] = crypto_code
        if store_id is not None:
            _path_params['storeId'] = store_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Basic', 
            'API_Key'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v1/stores/{storeId}/payment-methods/onchain/{cryptoCode}/wallet/address',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


