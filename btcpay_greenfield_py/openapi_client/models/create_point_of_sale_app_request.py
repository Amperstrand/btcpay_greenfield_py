# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.checkout_type import CheckoutType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreatePointOfSaleAppRequest(BaseModel):
    """
    CreatePointOfSaleAppRequest
    """ # noqa: E501
    app_name: Optional[StrictStr] = Field(default=None, description="The name of the app (shown in admin UI)", alias="appName")
    title: Optional[StrictStr] = Field(default=None, description="The title of the app (shown to the user)")
    description: Optional[StrictStr] = Field(default=None, description="The description of the app")
    template: Optional[StrictStr] = Field(default=None, description="Template for items available in the app")
    default_view: Optional[StrictStr] = Field(default=None, description="Template for items available in the app", alias="defaultView")
    currency: Optional[StrictStr] = Field(default=None, description="Currency to use for the app. Defaults to the currency used by the store if not specified")
    show_custom_amount: Optional[StrictBool] = Field(default=False, description="Whether to include a special item in the store which allows user to input a custom payment amount", alias="showCustomAmount")
    show_discount: Optional[StrictBool] = Field(default=True, description="Whether to allow user to input a discount amount. Applies to Cart view only. Not recommended for customer self-checkout", alias="showDiscount")
    enable_tips: Optional[StrictBool] = Field(default=True, description="Whether to allow user to input a tip amount. Applies to Cart and Light views only", alias="enableTips")
    custom_amount_pay_button_text: Optional[StrictStr] = Field(default='Pay', description="Payment button text which appears for items which allow user to input a custom amount", alias="customAmountPayButtonText")
    fixed_amount_pay_button_text: Optional[StrictStr] = Field(default='Buy for {PRICE_HERE}', description="Payment button text which appears for items which have a fixed price", alias="fixedAmountPayButtonText")
    tip_text: Optional[StrictStr] = Field(default='Do you want to leave a tip?', description="Prompt which appears next to the tip amount field if tipping is enabled", alias="tipText")
    custom_css_link: Optional[StrictStr] = Field(default=None, description="Link to a custom CSS stylesheet to be used in the app", alias="customCSSLink")
    embedded_css: Optional[StrictStr] = Field(default=None, description="Custom CSS to embed into the app", alias="embeddedCSS")
    notification_url: Optional[StrictStr] = Field(default=None, description="Callback notification url to POST to once when invoice is paid for and once when there are enough blockchain confirmations", alias="notificationUrl")
    redirect_url: Optional[StrictStr] = Field(default=None, description="URL to redirect user to once invoice is paid", alias="redirectUrl")
    redirect_automatically: Optional[StrictBool] = Field(default=None, description="Whether to redirect user to redirect URL automatically once invoice is paid. Defaults to what is set in the store settings", alias="redirectAutomatically")
    requires_refund_email: Optional[StrictBool] = Field(default=None, description="Whether refund email is required when paying the invoice. Defaults to what is set in the store settings", alias="requiresRefundEmail")
    checkout_type: Optional[CheckoutType] = Field(default=None, alias="checkoutType")
    form_id: Optional[StrictStr] = Field(default=None, description="Form ID to request customer data", alias="formId")
    __properties: ClassVar[List[str]] = ["appName", "title", "description", "template", "defaultView", "currency", "showCustomAmount", "showDiscount", "enableTips", "customAmountPayButtonText", "fixedAmountPayButtonText", "tipText", "customCSSLink", "embeddedCSS", "notificationUrl", "redirectUrl", "redirectAutomatically", "requiresRefundEmail", "checkoutType", "formId"]

    @field_validator('default_view')
    def default_view_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Cart', 'Light', 'Print', 'Static'):
            raise ValueError("must be one of enum values ('Cart', 'Light', 'Print', 'Static')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreatePointOfSaleAppRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if template (nullable) is None
        # and model_fields_set contains the field
        if self.template is None and "template" in self.model_fields_set:
            _dict['template'] = None

        # set to None if default_view (nullable) is None
        # and model_fields_set contains the field
        if self.default_view is None and "default_view" in self.model_fields_set:
            _dict['defaultView'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if show_custom_amount (nullable) is None
        # and model_fields_set contains the field
        if self.show_custom_amount is None and "show_custom_amount" in self.model_fields_set:
            _dict['showCustomAmount'] = None

        # set to None if show_discount (nullable) is None
        # and model_fields_set contains the field
        if self.show_discount is None and "show_discount" in self.model_fields_set:
            _dict['showDiscount'] = None

        # set to None if enable_tips (nullable) is None
        # and model_fields_set contains the field
        if self.enable_tips is None and "enable_tips" in self.model_fields_set:
            _dict['enableTips'] = None

        # set to None if custom_amount_pay_button_text (nullable) is None
        # and model_fields_set contains the field
        if self.custom_amount_pay_button_text is None and "custom_amount_pay_button_text" in self.model_fields_set:
            _dict['customAmountPayButtonText'] = None

        # set to None if fixed_amount_pay_button_text (nullable) is None
        # and model_fields_set contains the field
        if self.fixed_amount_pay_button_text is None and "fixed_amount_pay_button_text" in self.model_fields_set:
            _dict['fixedAmountPayButtonText'] = None

        # set to None if tip_text (nullable) is None
        # and model_fields_set contains the field
        if self.tip_text is None and "tip_text" in self.model_fields_set:
            _dict['tipText'] = None

        # set to None if custom_css_link (nullable) is None
        # and model_fields_set contains the field
        if self.custom_css_link is None and "custom_css_link" in self.model_fields_set:
            _dict['customCSSLink'] = None

        # set to None if embedded_css (nullable) is None
        # and model_fields_set contains the field
        if self.embedded_css is None and "embedded_css" in self.model_fields_set:
            _dict['embeddedCSS'] = None

        # set to None if notification_url (nullable) is None
        # and model_fields_set contains the field
        if self.notification_url is None and "notification_url" in self.model_fields_set:
            _dict['notificationUrl'] = None

        # set to None if redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_url is None and "redirect_url" in self.model_fields_set:
            _dict['redirectUrl'] = None

        # set to None if redirect_automatically (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_automatically is None and "redirect_automatically" in self.model_fields_set:
            _dict['redirectAutomatically'] = None

        # set to None if requires_refund_email (nullable) is None
        # and model_fields_set contains the field
        if self.requires_refund_email is None and "requires_refund_email" in self.model_fields_set:
            _dict['requiresRefundEmail'] = None

        # set to None if checkout_type (nullable) is None
        # and model_fields_set contains the field
        if self.checkout_type is None and "checkout_type" in self.model_fields_set:
            _dict['checkoutType'] = None

        # set to None if form_id (nullable) is None
        # and model_fields_set contains the field
        if self.form_id is None and "form_id" in self.model_fields_set:
            _dict['formId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreatePointOfSaleAppRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appName": obj.get("appName"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "template": obj.get("template"),
            "defaultView": obj.get("defaultView"),
            "currency": obj.get("currency"),
            "showCustomAmount": obj.get("showCustomAmount") if obj.get("showCustomAmount") is not None else False,
            "showDiscount": obj.get("showDiscount") if obj.get("showDiscount") is not None else True,
            "enableTips": obj.get("enableTips") if obj.get("enableTips") is not None else True,
            "customAmountPayButtonText": obj.get("customAmountPayButtonText") if obj.get("customAmountPayButtonText") is not None else 'Pay',
            "fixedAmountPayButtonText": obj.get("fixedAmountPayButtonText") if obj.get("fixedAmountPayButtonText") is not None else 'Buy for {PRICE_HERE}',
            "tipText": obj.get("tipText") if obj.get("tipText") is not None else 'Do you want to leave a tip?',
            "customCSSLink": obj.get("customCSSLink"),
            "embeddedCSS": obj.get("embeddedCSS"),
            "notificationUrl": obj.get("notificationUrl"),
            "redirectUrl": obj.get("redirectUrl"),
            "redirectAutomatically": obj.get("redirectAutomatically"),
            "requiresRefundEmail": obj.get("requiresRefundEmail"),
            "checkoutType": obj.get("checkoutType"),
            "formId": obj.get("formId")
        })
        return _obj


