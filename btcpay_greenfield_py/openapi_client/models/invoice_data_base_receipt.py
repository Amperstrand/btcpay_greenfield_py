# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InvoiceDataBaseReceipt(BaseModel):
    """
    Additional settings to customize the public receipt
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="A public page will be accessible once the invoice is settled. If null or unspecified, it will fallback to the store's settings. (The default store settings is true)")
    show_qr: Optional[StrictBool] = Field(default=None, description="Show the QR code of the receipt in the public receipt page. If null or unspecified, it will fallback to the store's settings. (The default store setting is true)", alias="showQR")
    show_payments: Optional[StrictBool] = Field(default=None, description="Show the payment list in the public receipt page. If null or unspecified, it will fallback to the store's settings. (The default store setting is true)", alias="showPayments")
    __properties: ClassVar[List[str]] = ["enabled", "showQR", "showPayments"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InvoiceDataBaseReceipt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if enabled (nullable) is None
        # and model_fields_set contains the field
        if self.enabled is None and "enabled" in self.model_fields_set:
            _dict['enabled'] = None

        # set to None if show_qr (nullable) is None
        # and model_fields_set contains the field
        if self.show_qr is None and "show_qr" in self.model_fields_set:
            _dict['showQR'] = None

        # set to None if show_payments (nullable) is None
        # and model_fields_set contains the field
        if self.show_payments is None and "show_payments" in self.model_fields_set:
            _dict['showPayments'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InvoiceDataBaseReceipt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "showQR": obj.get("showQR"),
            "showPayments": obj.get("showPayments")
        })
        return _obj


