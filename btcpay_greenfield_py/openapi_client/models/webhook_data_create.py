# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.webhook_data_base_authorized_events import WebhookDataBaseAuthorizedEvents
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WebhookDataCreate(BaseModel):
    """
    WebhookDataCreate
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="Whether this webhook is enabled or not")
    automatic_redelivery: Optional[StrictBool] = Field(default=True, description="If true, BTCPay Server will retry to redeliver any failed delivery after 10 seconds, 1 minutes and up to 6 times after 10 minutes.", alias="automaticRedelivery")
    url: Optional[StrictStr] = Field(default=None, description="The endpoint where BTCPay Server will make the POST request with the webhook body")
    authorized_events: Optional[WebhookDataBaseAuthorizedEvents] = Field(default=None, alias="authorizedEvents")
    secret: Optional[StrictStr] = Field(default=None, description="Must be used by the callback receiver to ensure the delivery comes from BTCPay Server. BTCPay Server includes the `BTCPay-Sig` HTTP header, whose format is `sha256=HMAC256(UTF8(webhook's secret), body)`. The pattern to authenticate the webhook is similar to [how to secure webhooks in Github](https://docs.github.com/webhooks/securing/). If left out, null, or empty, the secret will be auto-generated.")
    __properties: ClassVar[List[str]] = ["enabled", "automaticRedelivery", "url", "authorizedEvents", "secret"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WebhookDataCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authorized_events
        if self.authorized_events:
            _dict['authorizedEvents'] = self.authorized_events.to_dict()
        # set to None if secret (nullable) is None
        # and model_fields_set contains the field
        if self.secret is None and "secret" in self.model_fields_set:
            _dict['secret'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WebhookDataCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "automaticRedelivery": obj.get("automaticRedelivery") if obj.get("automaticRedelivery") is not None else True,
            "url": obj.get("url"),
            "authorizedEvents": WebhookDataBaseAuthorizedEvents.from_dict(obj.get("authorizedEvents")) if obj.get("authorizedEvents") is not None else None,
            "secret": obj.get("secret")
        })
        return _obj


