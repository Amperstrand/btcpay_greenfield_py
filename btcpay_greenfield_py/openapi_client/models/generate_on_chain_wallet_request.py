# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class GenerateOnChainWalletRequest(BaseModel):
    """
    GenerateOnChainWalletRequest
    """ # noqa: E501
    existing_mnemonic: Optional[StrictStr] = Field(default=None, description="An existing BIP39 mnemonic seed to generate the wallet with", alias="existingMnemonic")
    passphrase: Optional[StrictStr] = Field(default=None, description="A passphrase for the BIP39 mnemonic seed")
    account_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="The account to derive from the BIP39 mnemonic seed", alias="accountNumber")
    save_private_keys: Optional[StrictBool] = Field(default=False, description="Whether to store the seed inside BTCPay Server to enable some additional services. IF `false` AND `existingMnemonic` IS NOT SPECIFIED, BE SURE TO SECURELY STORE THE SEED IN THE RESPONSE!", alias="savePrivateKeys")
    import_keys_to_rpc: Optional[StrictBool] = Field(default=False, description="Whether to import all addresses generated via BTCPay Server into the underlying node wallet. (Private keys will also be imported if `savePrivateKeys` is set to true.", alias="importKeysToRPC")
    word_list: Optional[StrictStr] = Field(default='English', description="If `existingMnemonic` is not set, a mnemonic is generated using the specified wordList.", alias="wordList")
    word_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=12, description="If `existingMnemonic` is not set, a mnemonic is generated using the specified wordCount.", alias="wordCount")
    script_pub_key_type: Optional[StrictStr] = Field(default='Segwit', description="the type of wallet to generate", alias="scriptPubKeyType")
    __properties: ClassVar[List[str]] = ["existingMnemonic", "passphrase", "accountNumber", "savePrivateKeys", "importKeysToRPC", "wordList", "wordCount", "scriptPubKeyType"]

    @field_validator('word_list')
    def word_list_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ChineseSimplified', 'ChineseTraditional', 'Czech', 'English', 'French', 'Japanese', 'PortugueseBrazil', 'Spanish'):
            raise ValueError("must be one of enum values ('ChineseSimplified', 'ChineseTraditional', 'Czech', 'English', 'French', 'Japanese', 'PortugueseBrazil', 'Spanish')")
        return value

    @field_validator('word_count')
    def word_count_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (12, 15, 18, 21, 24):
            raise ValueError("must be one of enum values (12, 15, 18, 21, 24)")
        return value

    @field_validator('script_pub_key_type')
    def script_pub_key_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Legacy', 'Segwit', 'SegwitP2SH'):
            raise ValueError("must be one of enum values ('Legacy', 'Segwit', 'SegwitP2SH')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GenerateOnChainWalletRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GenerateOnChainWalletRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "existingMnemonic": obj.get("existingMnemonic"),
            "passphrase": obj.get("passphrase"),
            "accountNumber": obj.get("accountNumber") if obj.get("accountNumber") is not None else 0,
            "savePrivateKeys": obj.get("savePrivateKeys") if obj.get("savePrivateKeys") is not None else False,
            "importKeysToRPC": obj.get("importKeysToRPC") if obj.get("importKeysToRPC") is not None else False,
            "wordList": obj.get("wordList") if obj.get("wordList") is not None else 'English',
            "wordCount": obj.get("wordCount") if obj.get("wordCount") is not None else 12,
            "scriptPubKeyType": obj.get("scriptPubKeyType") if obj.get("scriptPubKeyType") is not None else 'Segwit'
        })
        return _obj


