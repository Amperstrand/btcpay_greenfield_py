# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from openapi_client.models.ledger_entry_data import LedgerEntryData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class WithdrawalResultData(BaseModel):
    """
    WithdrawalResultData
    """ # noqa: E501
    asset: Optional[StrictStr] = Field(default=None, description="The asset that is being withdrawn.")
    payment_method: Optional[StrictStr] = Field(default=None, description="The payment method that is used (crypto code + network).", alias="paymentMethod")
    ledger_entries: Optional[List[LedgerEntryData]] = Field(default=None, description="The asset entries that were changed during the withdrawal. The first item is always the withdrawal itself. It could also includes ledger entries for the costs and may include credits or exchange tokens to give a discount.", alias="ledgerEntries")
    withdrawal_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the withdrawal used by the exchange.", alias="withdrawalId")
    account_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the custodian account used.", alias="accountId")
    custodian_code: Optional[StrictStr] = Field(default=None, description="The code of the custodian used.", alias="custodianCode")
    status: Optional[StrictStr] = Field(default=None, description="The status of the withdrawal: 'Queued', 'Complete', 'Failed' or 'Unknown'.")
    transaction_id: Optional[StrictStr] = Field(default=None, description="The transaction ID on the blockchain once the withdrawal has been executed.", alias="transactionId")
    target_address: Optional[StrictStr] = Field(default=None, description="The address where the funds were sent to once the withdrawal has been executed.", alias="targetAddress")
    __properties: ClassVar[List[str]] = ["asset", "paymentMethod", "ledgerEntries", "withdrawalId", "accountId", "custodianCode", "status", "transactionId", "targetAddress"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of WithdrawalResultData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ledger_entries (list)
        _items = []
        if self.ledger_entries:
            for _item in self.ledger_entries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ledgerEntries'] = _items
        # set to None if withdrawal_id (nullable) is None
        # and model_fields_set contains the field
        if self.withdrawal_id is None and "withdrawal_id" in self.model_fields_set:
            _dict['withdrawalId'] = None

        # set to None if transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_id is None and "transaction_id" in self.model_fields_set:
            _dict['transactionId'] = None

        # set to None if target_address (nullable) is None
        # and model_fields_set contains the field
        if self.target_address is None and "target_address" in self.model_fields_set:
            _dict['targetAddress'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of WithdrawalResultData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset": obj.get("asset"),
            "paymentMethod": obj.get("paymentMethod"),
            "ledgerEntries": [LedgerEntryData.from_dict(_item) for _item in obj.get("ledgerEntries")] if obj.get("ledgerEntries") is not None else None,
            "withdrawalId": obj.get("withdrawalId"),
            "accountId": obj.get("accountId"),
            "custodianCode": obj.get("custodianCode"),
            "status": obj.get("status"),
            "transactionId": obj.get("transactionId"),
            "targetAddress": obj.get("targetAddress")
        })
        return _obj


