# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PayLightningInvoiceRequest(BaseModel):
    """
    PayLightningInvoiceRequest
    """ # noqa: E501
    bolt11: Optional[StrictStr] = Field(default=None, description="The BOLT11 of the invoice to pay", alias="BOLT11")
    amount: Optional[StrictStr] = Field(default=None, description="Optional explicit payment amount in millisatoshi (if specified, it overrides the BOLT11 amount)")
    max_fee_percent: Optional[StrictStr] = Field(default=None, description="The fee limit expressed as a percentage of the payment amount", alias="maxFeePercent")
    max_fee_flat: Optional[StrictStr] = Field(default=None, description="The fee limit expressed as a fixed amount in satoshi", alias="maxFeeFlat")
    send_timeout: Optional[object] = Field(default=None, alias="sendTimeout")
    __properties: ClassVar[List[str]] = ["BOLT11", "amount", "maxFeePercent", "maxFeeFlat", "sendTimeout"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PayLightningInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if max_fee_percent (nullable) is None
        # and model_fields_set contains the field
        if self.max_fee_percent is None and "max_fee_percent" in self.model_fields_set:
            _dict['maxFeePercent'] = None

        # set to None if max_fee_flat (nullable) is None
        # and model_fields_set contains the field
        if self.max_fee_flat is None and "max_fee_flat" in self.model_fields_set:
            _dict['maxFeeFlat'] = None

        # set to None if send_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.send_timeout is None and "send_timeout" in self.model_fields_set:
            _dict['sendTimeout'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PayLightningInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BOLT11": obj.get("BOLT11"),
            "amount": obj.get("amount"),
            "maxFeePercent": obj.get("maxFeePercent"),
            "maxFeeFlat": obj.get("maxFeeFlat"),
            "sendTimeout": obj.get("sendTimeout")
        })
        return _obj


