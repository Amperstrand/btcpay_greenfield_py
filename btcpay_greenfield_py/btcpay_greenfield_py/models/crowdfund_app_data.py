# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CrowdfundAppData(BaseModel):
    """
    CrowdfundAppData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the app")
    name: Optional[StrictStr] = Field(default=None, description="Name given to the app when it was created")
    store_id: Optional[StrictStr] = Field(default=None, description="Id of the store to which the app belongs", alias="storeId")
    created: Optional[StrictInt] = Field(default=None, description="UNIX timestamp for when the app was created")
    app_type: Optional[StrictStr] = Field(default=None, description="Type of the app which was created", alias="appType")
    archived: Optional[StrictBool] = Field(default=False, description="If true, the app does not appear in the apps list by default.")
    title: Optional[StrictStr] = Field(default=None, description="Display title of the app")
    description: Optional[StrictStr] = Field(default=None, description="App description")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the app is enabled to be viewed by everyone")
    enforce_target_amount: Optional[StrictBool] = Field(default=None, description="Whether contributions over the set target amount are allowed", alias="enforceTargetAmount")
    start_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A unix timestamp in seconds", alias="startDate")
    end_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A unix timestamp in seconds", alias="endDate")
    target_currency: Optional[StrictStr] = Field(default=None, description="Target currency for the crowdfund", alias="targetCurrency")
    target_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Target amount for the crowdfund", alias="targetAmount")
    custom_css_link: Optional[StrictStr] = Field(default=None, description="Link to a custom CSS stylesheet to be used in the app", alias="customCSSLink")
    main_image_url: Optional[StrictStr] = Field(default=None, description="URL for image used as a cover image for the app", alias="mainImageUrl")
    embedded_css: Optional[StrictStr] = Field(default=None, description="Custom CSS embedded into the app", alias="embeddedCSS")
    perks: Optional[Union[str, Any]] = Field(default=None, description="JSON of perks available in the app")
    notification_url: Optional[StrictStr] = Field(default=None, description="Callback notification url to POST to once when invoice is paid for and once when there are enough blockchain confirmations", alias="notificationUrl")
    tagline: Optional[StrictStr] = Field(default=None, description="Tagline for the app displayed to user")
    disqus_enabled: Optional[StrictBool] = Field(default=None, description="Whether Disqus is enabled for the app", alias="disqusEnabled")
    disqus_shortname: Optional[StrictStr] = Field(default=None, description="Disqus shortname to used for the app", alias="disqusShortname")
    sounds_enabled: Optional[StrictBool] = Field(default=None, description="Whether sounds on new contributions are enabled", alias="soundsEnabled")
    animations_enabled: Optional[StrictBool] = Field(default=None, description="Whether background animations on new contributions are enabled", alias="animationsEnabled")
    reset_every_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Contribution goal reset frequency amount", alias="resetEveryAmount")
    reset_every: Optional[StrictStr] = Field(default=None, description="Contribution goal reset frequency", alias="resetEvery")
    display_perks_value: Optional[StrictBool] = Field(default=None, description="Whether perk values are displayed", alias="displayPerksValue")
    sort_perks_by_popularity: Optional[StrictBool] = Field(default=True, description="Whether perks are sorted by popularity", alias="sortPerksByPopularity")
    sounds: Optional[List[StrictStr]] = Field(default=None, description="Array of custom sounds which can be used on new contributions")
    animation_colors: Optional[List[StrictStr]] = Field(default=None, description="Array of custom HEX colors which can be used for background animations on new contributions", alias="animationColors")
    __properties: ClassVar[List[str]] = ["id", "name", "storeId", "created", "appType", "archived", "title", "description", "enabled", "enforceTargetAmount", "startDate", "endDate", "targetCurrency", "targetAmount", "customCSSLink", "mainImageUrl", "embeddedCSS", "perks", "notificationUrl", "tagline", "disqusEnabled", "disqusShortname", "soundsEnabled", "animationsEnabled", "resetEveryAmount", "resetEvery", "displayPerksValue", "sortPerksByPopularity", "sounds", "animationColors"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CrowdfundAppData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if archived (nullable) is None
        # and model_fields_set contains the field
        if self.archived is None and "archived" in self.model_fields_set:
            _dict['archived'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CrowdfundAppData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "storeId": obj.get("storeId"),
            "created": obj.get("created"),
            "appType": obj.get("appType"),
            "archived": obj.get("archived") if obj.get("archived") is not None else False,
            "title": obj.get("title"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "enforceTargetAmount": obj.get("enforceTargetAmount"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "targetCurrency": obj.get("targetCurrency"),
            "targetAmount": obj.get("targetAmount"),
            "customCSSLink": obj.get("customCSSLink"),
            "mainImageUrl": obj.get("mainImageUrl"),
            "embeddedCSS": obj.get("embeddedCSS"),
            "perks": obj.get("perks"),
            "notificationUrl": obj.get("notificationUrl"),
            "tagline": obj.get("tagline"),
            "disqusEnabled": obj.get("disqusEnabled"),
            "disqusShortname": obj.get("disqusShortname"),
            "soundsEnabled": obj.get("soundsEnabled"),
            "animationsEnabled": obj.get("animationsEnabled"),
            "resetEveryAmount": obj.get("resetEveryAmount"),
            "resetEvery": obj.get("resetEvery"),
            "displayPerksValue": obj.get("displayPerksValue"),
            "sortPerksByPopularity": obj.get("sortPerksByPopularity") if obj.get("sortPerksByPopularity") is not None else True,
            "sounds": obj.get("sounds"),
            "animationColors": obj.get("animationColors")
        })
        return _obj


