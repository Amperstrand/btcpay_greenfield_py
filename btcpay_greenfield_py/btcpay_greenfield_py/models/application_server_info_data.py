# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from btcpay_greenfield_py.models.application_server_info_sync_status_data import ApplicationServerInfoSyncStatusData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApplicationServerInfoData(BaseModel):
    """
    ApplicationServerInfoData
    """ # noqa: E501
    version: Optional[StrictStr] = Field(default=None, description="BTCPay Server version")
    onion: Optional[StrictStr] = Field(default=None, description="The Tor hostname")
    supported_payment_methods: Optional[List[StrictStr]] = Field(default=None, description="The payment methods this server supports", alias="supportedPaymentMethods")
    fully_synched: Optional[StrictBool] = Field(default=None, description="True if the instance is fully synchronized, according to NBXplorer", alias="fullySynched")
    sync_status: Optional[List[ApplicationServerInfoSyncStatusData]] = Field(default=None, alias="syncStatus")
    __properties: ClassVar[List[str]] = ["version", "onion", "supportedPaymentMethods", "fullySynched", "syncStatus"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApplicationServerInfoData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sync_status (list)
        _items = []
        if self.sync_status:
            for _item in self.sync_status:
                if _item:
                    _items.append(_item.to_dict())
            _dict['syncStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApplicationServerInfoData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "onion": obj.get("onion"),
            "supportedPaymentMethods": obj.get("supportedPaymentMethods"),
            "fullySynched": obj.get("fullySynched"),
            "syncStatus": [ApplicationServerInfoSyncStatusData.from_dict(_item) for _item in obj.get("syncStatus")] if obj.get("syncStatus") is not None else None
        })
        return _obj


