# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from btcpay_greenfield_py.models.invoice_payment_method_data_model_additional_data import InvoicePaymentMethodDataModelAdditionalData
from btcpay_greenfield_py.models.payment import Payment
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InvoicePaymentMethodDataModel(BaseModel):
    """
    InvoicePaymentMethodDataModel
    """ # noqa: E501
    payment_method: Optional[StrictStr] = Field(default=None, description="Payment method IDs are a combination of crypto code and payment type. Available payment method IDs for Bitcoin are:   - `\"BTC-OnChain\"` (with the equivalent of `\"BTC\"`)    -`\"BTC-LightningLike\"`: Any supported LN-based payment method (Lightning or LNURL)    - `\"BTC-LightningNetwork\"`: Lightning    - `\"BTC-LNURLPAY\"`: LNURL        Note: Separator can be either `-` or `_`.", alias="paymentMethod")
    crypto_code: Optional[StrictStr] = Field(default=None, description="Crypto code of the payment method (e.g., \"BTC\" or \"LTC\")", alias="cryptoCode")
    destination: Optional[StrictStr] = Field(default=None, description="The destination the payment must be made to")
    payment_link: Optional[StrictStr] = Field(default=None, description="A payment link that helps pay to the payment destination", alias="paymentLink")
    rate: Optional[StrictStr] = Field(default=None, description="The rate between this payment method's currency and the invoice currency")
    payment_method_paid: Optional[StrictStr] = Field(default=None, description="The amount paid by this payment method", alias="paymentMethodPaid")
    total_paid: Optional[StrictStr] = Field(default=None, description="The total amount paid by all payment methods to the invoice, converted to this payment method's currency", alias="totalPaid")
    due: Optional[StrictStr] = Field(default=None, description="The total amount left to be paid, converted to this payment method's currency (will be negative if overpaid)")
    amount: Optional[StrictStr] = Field(default=None, description="The invoice amount, converted to this payment method's currency")
    network_fee: Optional[StrictStr] = Field(default=None, description="The added merchant fee to pay for network costs of this payment method.", alias="networkFee")
    payments: Optional[List[Payment]] = Field(default=None, description="Payments made with this payment method.")
    activated: Optional[StrictBool] = Field(default=None, description="If the payment method is activated (when lazy payments option is enabled")
    additional_data: Optional[InvoicePaymentMethodDataModelAdditionalData] = Field(default=None, alias="additionalData")
    __properties: ClassVar[List[str]] = ["paymentMethod", "cryptoCode", "destination", "paymentLink", "rate", "paymentMethodPaid", "totalPaid", "due", "amount", "networkFee", "payments", "activated", "additionalData"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InvoicePaymentMethodDataModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item in self.payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of additional_data
        if self.additional_data:
            _dict['additionalData'] = self.additional_data.to_dict()
        # set to None if payment_link (nullable) is None
        # and model_fields_set contains the field
        if self.payment_link is None and "payment_link" in self.model_fields_set:
            _dict['paymentLink'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InvoicePaymentMethodDataModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentMethod": obj.get("paymentMethod"),
            "cryptoCode": obj.get("cryptoCode"),
            "destination": obj.get("destination"),
            "paymentLink": obj.get("paymentLink"),
            "rate": obj.get("rate"),
            "paymentMethodPaid": obj.get("paymentMethodPaid"),
            "totalPaid": obj.get("totalPaid"),
            "due": obj.get("due"),
            "amount": obj.get("amount"),
            "networkFee": obj.get("networkFee"),
            "payments": [Payment.from_dict(_item) for _item in obj.get("payments")] if obj.get("payments") is not None else None,
            "activated": obj.get("activated"),
            "additionalData": InvoicePaymentMethodDataModelAdditionalData.from_dict(obj.get("additionalData")) if obj.get("additionalData") is not None else None
        })
        return _obj


