# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PointOfSaleAppData(BaseModel):
    """
    PointOfSaleAppData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the app")
    name: Optional[StrictStr] = Field(default=None, description="Name given to the app when it was created")
    store_id: Optional[StrictStr] = Field(default=None, description="Id of the store to which the app belongs", alias="storeId")
    created: Optional[StrictInt] = Field(default=None, description="UNIX timestamp for when the app was created")
    app_type: Optional[StrictStr] = Field(default=None, description="Type of the app which was created", alias="appType")
    archived: Optional[StrictBool] = Field(default=False, description="If true, the app does not appear in the apps list by default.")
    title: Optional[StrictStr] = Field(default=None, description="Display title of the app")
    description: Optional[StrictStr] = Field(default=None, description="App description")
    default_view: Optional[StrictStr] = Field(default=None, description="App view type (e.g., static, cart, etc...)", alias="defaultView")
    show_custom_amount: Optional[StrictBool] = Field(default=None, description="Whether the option to enter a custom amount is shown", alias="showCustomAmount")
    show_discount: Optional[StrictBool] = Field(default=None, description="Whether the option to enter a discount is shown", alias="showDiscount")
    enable_tips: Optional[StrictBool] = Field(default=None, description="Whether the option to enter a tip is shown", alias="enableTips")
    currency: Optional[StrictStr] = Field(default=None, description="Currency used for the app")
    items: Optional[Union[str, Any]] = Field(default=None, description="JSON object of app items")
    fixed_amount_pay_button_text: Optional[StrictStr] = Field(default=None, description="Payment button text template for items with a set price", alias="fixedAmountPayButtonText")
    custom_amount_pay_button_text: Optional[StrictStr] = Field(default=None, description="Payment button text which appears for items which allow user to input a custom amount", alias="customAmountPayButtonText")
    tip_text: Optional[StrictStr] = Field(default=None, description="Prompt which appears next to the tip amount field if tipping is enabled", alias="tipText")
    custom_css_link: Optional[StrictStr] = Field(default=None, description="Link to a custom CSS stylesheet to be used in the app", alias="customCSSLink")
    notification_url: Optional[StrictStr] = Field(default=None, description="Callback notification url to POST to once when invoice is paid for and once when there are enough blockchain confirmations", alias="notificationUrl")
    redirect_url: Optional[StrictStr] = Field(default=None, description="URL user is redirected to once invoice is paid", alias="redirectUrl")
    embedded_css: Optional[StrictStr] = Field(default=None, description="Custom CSS embedded into the app", alias="embeddedCSS")
    redirect_automatically: Optional[StrictBool] = Field(default=None, description="Whether user is redirected to specified redirect URL automatically after the invoice is paid", alias="redirectAutomatically")
    requires_refund_email: Optional[StrictBool] = Field(default=None, description="Whether refund email is required when paying the invoice. Defaults to `null` if not explicitly set.", alias="requiresRefundEmail")
    __properties: ClassVar[List[str]] = ["id", "name", "storeId", "created", "appType", "archived", "title", "description", "defaultView", "showCustomAmount", "showDiscount", "enableTips", "currency", "items", "fixedAmountPayButtonText", "customAmountPayButtonText", "tipText", "customCSSLink", "notificationUrl", "redirectUrl", "embeddedCSS", "redirectAutomatically", "requiresRefundEmail"]

    @field_validator('default_view')
    def default_view_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Static', 'Cart', 'Light', 'Print'):
            raise ValueError("must be one of enum values ('Static', 'Cart', 'Light', 'Print')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PointOfSaleAppData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if archived (nullable) is None
        # and model_fields_set contains the field
        if self.archived is None and "archived" in self.model_fields_set:
            _dict['archived'] = None

        # set to None if requires_refund_email (nullable) is None
        # and model_fields_set contains the field
        if self.requires_refund_email is None and "requires_refund_email" in self.model_fields_set:
            _dict['requiresRefundEmail'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PointOfSaleAppData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "storeId": obj.get("storeId"),
            "created": obj.get("created"),
            "appType": obj.get("appType"),
            "archived": obj.get("archived") if obj.get("archived") is not None else False,
            "title": obj.get("title"),
            "description": obj.get("description"),
            "defaultView": obj.get("defaultView"),
            "showCustomAmount": obj.get("showCustomAmount"),
            "showDiscount": obj.get("showDiscount"),
            "enableTips": obj.get("enableTips"),
            "currency": obj.get("currency"),
            "items": obj.get("items"),
            "fixedAmountPayButtonText": obj.get("fixedAmountPayButtonText"),
            "customAmountPayButtonText": obj.get("customAmountPayButtonText"),
            "tipText": obj.get("tipText"),
            "customCSSLink": obj.get("customCSSLink"),
            "notificationUrl": obj.get("notificationUrl"),
            "redirectUrl": obj.get("redirectUrl"),
            "embeddedCSS": obj.get("embeddedCSS"),
            "redirectAutomatically": obj.get("redirectAutomatically"),
            "requiresRefundEmail": obj.get("requiresRefundEmail")
        })
        return _obj


