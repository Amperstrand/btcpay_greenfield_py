# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from btcpay_greenfield_py.models.create_on_chain_transaction_request_destination import CreateOnChainTransactionRequestDestination
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CreateOnChainTransactionRequest(BaseModel):
    """
    CreateOnChainTransactionRequest
    """ # noqa: E501
    destinations: Optional[List[CreateOnChainTransactionRequestDestination]] = Field(default=None, description="What and where to send money")
    feerate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Transaction fee.")
    proceed_with_payjoin: Optional[StrictBool] = Field(default=True, description="Whether to attempt to do a BIP78 payjoin if one of the destinations is a BIP21 with payjoin enabled", alias="proceedWithPayjoin")
    proceed_with_broadcast: Optional[StrictBool] = Field(default=True, description="Whether to broadcast the transaction after creating it or to simply return the transaction in hex format.", alias="proceedWithBroadcast")
    no_change: Optional[StrictBool] = Field(default=False, description="Whether to send all the spent coins to the destinations (THIS CAN COST YOU SIGNIFICANT AMOUNTS OF MONEY, LEAVE FALSE UNLESS YOU KNOW WHAT YOU ARE DOING).", alias="noChange")
    rbf: Optional[StrictBool] = Field(default=None, description="Whether to enable RBF for the transaction. Leave blank to have it random (beneficial to privacy)")
    exclude_unconfirmed: Optional[StrictBool] = Field(default=False, description="Whether to exclude unconfirmed UTXOs from the transaction.", alias="excludeUnconfirmed")
    selected_inputs: Optional[List[StrictStr]] = Field(default=None, description="Restrict the creation of the transactions from the outpoints provided ONLY (coin selection)", alias="selectedInputs")
    __properties: ClassVar[List[str]] = ["destinations", "feerate", "proceedWithPayjoin", "proceedWithBroadcast", "noChange", "rbf", "excludeUnconfirmed", "selectedInputs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CreateOnChainTransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item in self.destinations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['destinations'] = _items
        # set to None if proceed_with_payjoin (nullable) is None
        # and model_fields_set contains the field
        if self.proceed_with_payjoin is None and "proceed_with_payjoin" in self.model_fields_set:
            _dict['proceedWithPayjoin'] = None

        # set to None if proceed_with_broadcast (nullable) is None
        # and model_fields_set contains the field
        if self.proceed_with_broadcast is None and "proceed_with_broadcast" in self.model_fields_set:
            _dict['proceedWithBroadcast'] = None

        # set to None if no_change (nullable) is None
        # and model_fields_set contains the field
        if self.no_change is None and "no_change" in self.model_fields_set:
            _dict['noChange'] = None

        # set to None if rbf (nullable) is None
        # and model_fields_set contains the field
        if self.rbf is None and "rbf" in self.model_fields_set:
            _dict['rbf'] = None

        # set to None if exclude_unconfirmed (nullable) is None
        # and model_fields_set contains the field
        if self.exclude_unconfirmed is None and "exclude_unconfirmed" in self.model_fields_set:
            _dict['excludeUnconfirmed'] = None

        # set to None if selected_inputs (nullable) is None
        # and model_fields_set contains the field
        if self.selected_inputs is None and "selected_inputs" in self.model_fields_set:
            _dict['selectedInputs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CreateOnChainTransactionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destinations": [CreateOnChainTransactionRequestDestination.from_dict(_item) for _item in obj.get("destinations")] if obj.get("destinations") is not None else None,
            "feerate": obj.get("feerate"),
            "proceedWithPayjoin": obj.get("proceedWithPayjoin") if obj.get("proceedWithPayjoin") is not None else True,
            "proceedWithBroadcast": obj.get("proceedWithBroadcast") if obj.get("proceedWithBroadcast") is not None else True,
            "noChange": obj.get("noChange") if obj.get("noChange") is not None else False,
            "rbf": obj.get("rbf"),
            "excludeUnconfirmed": obj.get("excludeUnconfirmed") if obj.get("excludeUnconfirmed") is not None else False,
            "selectedInputs": obj.get("selectedInputs")
        })
        return _obj


