# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from btcpay_greenfield_py.models.payout_payment_proof import PayoutPaymentProof
from btcpay_greenfield_py.models.payout_state import PayoutState
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PayoutData(BaseModel):
    """
    PayoutData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The id of the payout")
    revision: Optional[StrictInt] = Field(default=None, description="The revision number of the payout. This revision number is incremented when the payout amount or destination is modified before the approval.")
    pull_payment_id: Optional[StrictStr] = Field(default=None, description="The id of the pull payment this payout belongs to", alias="pullPaymentId")
    var_date: Optional[StrictStr] = Field(default=None, description="The creation date of the payout as a unix timestamp", alias="date")
    destination: Optional[StrictStr] = Field(default=None, description="The destination of the payout (can be an address or a BIP21 url)")
    amount: Optional[StrictStr] = Field(default=None, description="The amount of the payout in the currency of the pull payment (eg. USD).")
    payment_method: Optional[StrictStr] = Field(default=None, description="Payment method IDs are a combination of crypto code and payment type. Available payment method IDs for Bitcoin are:   - `\"BTC-OnChain\"` (with the equivalent of `\"BTC\"`)    -`\"BTC-LightningLike\"`: Any supported LN-based payment method (Lightning or LNURL)    - `\"BTC-LightningNetwork\"`: Lightning    - `\"BTC-LNURLPAY\"`: LNURL        Note: Separator can be either `-` or `_`.", alias="paymentMethod")
    crypto_code: Optional[StrictStr] = Field(default=None, description="Crypto code of the payment method of the payout (e.g., \"BTC\" or \"LTC\")", alias="cryptoCode")
    payment_method_amount: Optional[StrictStr] = Field(default=None, description="The amount of the payout in the currency of the payment method (eg. BTC). This is only available from the `AwaitingPayment` state.", alias="paymentMethodAmount")
    state: Optional[PayoutState] = None
    payment_proof: Optional[PayoutPaymentProof] = Field(default=None, alias="paymentProof")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional information around the payout that can be supplied. The mentioned properties are all optional and you can introduce any json format you wish.")
    __properties: ClassVar[List[str]] = ["id", "revision", "pullPaymentId", "date", "destination", "amount", "paymentMethod", "cryptoCode", "paymentMethodAmount", "state", "paymentProof", "metadata"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PayoutData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payment_proof
        if self.payment_proof:
            _dict['paymentProof'] = self.payment_proof.to_dict()
        # set to None if payment_method_amount (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method_amount is None and "payment_method_amount" in self.model_fields_set:
            _dict['paymentMethodAmount'] = None

        # set to None if payment_proof (nullable) is None
        # and model_fields_set contains the field
        if self.payment_proof is None and "payment_proof" in self.model_fields_set:
            _dict['paymentProof'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PayoutData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "revision": obj.get("revision"),
            "pullPaymentId": obj.get("pullPaymentId"),
            "date": obj.get("date"),
            "destination": obj.get("destination"),
            "amount": obj.get("amount"),
            "paymentMethod": obj.get("paymentMethod"),
            "cryptoCode": obj.get("cryptoCode"),
            "paymentMethodAmount": obj.get("paymentMethodAmount"),
            "state": obj.get("state"),
            "paymentProof": PayoutPaymentProof.from_dict(obj.get("paymentProof")) if obj.get("paymentProof") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


