# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from btcpay_greenfield_py.models.label_data import LabelData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OnChainWalletUTXOData(BaseModel):
    """
    OnChainWalletUTXOData
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="A comment linked to this utxo")
    amount: Optional[StrictStr] = Field(default=None, description="the value of this utxo")
    link: Optional[StrictStr] = Field(default=None, description="a link to the configured blockchain explorer to view the utxo")
    outpoint: Optional[StrictStr] = Field(default=None, description="outpoint of this utxo")
    timestamp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A unix timestamp in seconds")
    key_path: Optional[StrictStr] = Field(default=None, description="the derivation path in relation to the HD account", alias="keyPath")
    address: Optional[StrictStr] = Field(default=None, description="The wallet address of this utxo")
    confirmations: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of confirmations of this utxo")
    labels: Optional[List[LabelData]] = Field(default=None, description="Labels linked to this transaction")
    __properties: ClassVar[List[str]] = ["comment", "amount", "link", "outpoint", "timestamp", "keyPath", "address", "confirmations", "labels"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OnChainWalletUTXOData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item in self.labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['labels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OnChainWalletUTXOData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "amount": obj.get("amount"),
            "link": obj.get("link"),
            "outpoint": obj.get("outpoint"),
            "timestamp": obj.get("timestamp"),
            "keyPath": obj.get("keyPath"),
            "address": obj.get("address"),
            "confirmations": obj.get("confirmations"),
            "labels": [LabelData.from_dict(_item) for _item in obj.get("labels")] if obj.get("labels") is not None else None
        })
        return _obj


