# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class LightningChannelData(BaseModel):
    """
    LightningChannelData
    """ # noqa: E501
    remote_node: Optional[StrictStr] = Field(default=None, description="The public key of the node (Node ID)", alias="remoteNode")
    is_public: Optional[StrictBool] = Field(default=None, description="Whether the node is public", alias="isPublic")
    is_active: Optional[StrictBool] = Field(default=None, description="Whether the node is online", alias="isActive")
    capacity: Optional[StrictStr] = Field(default=None, description="The capacity of the channel in millisatoshi")
    local_balance: Optional[StrictStr] = Field(default=None, description="The local balance of the channel in millisatoshi", alias="localBalance")
    channel_point: Optional[StrictStr] = Field(default=None, alias="channelPoint")
    __properties: ClassVar[List[str]] = ["remoteNode", "isPublic", "isActive", "capacity", "localBalance", "channelPoint"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LightningChannelData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if channel_point (nullable) is None
        # and model_fields_set contains the field
        if self.channel_point is None and "channel_point" in self.model_fields_set:
            _dict['channelPoint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of LightningChannelData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "remoteNode": obj.get("remoteNode"),
            "isPublic": obj.get("isPublic"),
            "isActive": obj.get("isActive"),
            "capacity": obj.get("capacity"),
            "localBalance": obj.get("localBalance"),
            "channelPoint": obj.get("channelPoint")
        })
        return _obj


