# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PullPaymentData(BaseModel):
    """
    PullPaymentData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the pull payment")
    name: Optional[StrictStr] = Field(default=None, description="Name given to pull payment when it was created")
    description: Optional[StrictStr] = Field(default=None, description="Description given to pull payment when it was created")
    currency: Optional[StrictStr] = Field(default=None, description="The currency of the pull payment's amount")
    amount: Optional[StrictStr] = Field(default=None, description="The amount in the currency of this pull payment as a decimal string")
    period: Optional[StrictInt] = Field(default=None, description="The length of each period in seconds")
    bolt11_expiration: Optional[StrictStr] = Field(default=None, description="If lightning is activated, do not accept BOLT11 invoices with expiration less than â€¦ days", alias="BOLT11Expiration")
    auto_approve_claims: Optional[StrictBool] = Field(default=False, description="Any payouts created for this pull payment will skip the approval phase upon creation", alias="autoApproveClaims")
    archived: Optional[StrictBool] = Field(default=None, description="Whether this pull payment is archived")
    view_link: Optional[StrictStr] = Field(default=None, description="The link to a page to claim payouts to this pull payment", alias="viewLink")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "currency", "amount", "period", "BOLT11Expiration", "autoApproveClaims", "archived", "viewLink"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PullPaymentData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['period'] = None

        # set to None if auto_approve_claims (nullable) is None
        # and model_fields_set contains the field
        if self.auto_approve_claims is None and "auto_approve_claims" in self.model_fields_set:
            _dict['autoApproveClaims'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PullPaymentData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "currency": obj.get("currency"),
            "amount": obj.get("amount"),
            "period": obj.get("period"),
            "BOLT11Expiration": obj.get("BOLT11Expiration"),
            "autoApproveClaims": obj.get("autoApproveClaims") if obj.get("autoApproveClaims") is not None else False,
            "archived": obj.get("archived"),
            "viewLink": obj.get("viewLink")
        })
        return _obj


