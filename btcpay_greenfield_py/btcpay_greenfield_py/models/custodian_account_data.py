# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictStr
from pydantic import Field
from btcpay_greenfield_py.models.asset_balance_data import AssetBalanceData
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustodianAccountData(BaseModel):
    """
    CustodianAccountData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique code of the customer's account with this custodian. The format depends on the custodian.")
    store_id: Optional[StrictStr] = Field(default=None, description="The store ID.", alias="storeId")
    custodian_code: Optional[StrictStr] = Field(default=None, description="The code for the custodian.", alias="custodianCode")
    name: Optional[StrictStr] = Field(default=None, description="The name of the custodian account.")
    asset_balances: Optional[List[AssetBalanceData]] = Field(default=None, description="A real-time loaded list of all assets (fiat and crypto) on this custodian and the quantity held in the account. Assets with qty 0 can be omitted.", alias="assetBalances")
    config: Optional[Union[str, Any]] = Field(default=None, description="The configuration of this custodian account. Specific contents depend on the custodian and your access permissions.")
    __properties: ClassVar[List[str]] = ["id", "storeId", "custodianCode", "name", "assetBalances", "config"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustodianAccountData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in asset_balances (list)
        _items = []
        if self.asset_balances:
            for _item in self.asset_balances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['assetBalances'] = _items
        # set to None if asset_balances (nullable) is None
        # and model_fields_set contains the field
        if self.asset_balances is None and "asset_balances" in self.model_fields_set:
            _dict['assetBalances'] = None

        # set to None if config (nullable) is None
        # and model_fields_set contains the field
        if self.config is None and "config" in self.model_fields_set:
            _dict['config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustodianAccountData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "storeId": obj.get("storeId"),
            "custodianCode": obj.get("custodianCode"),
            "name": obj.get("name"),
            "assetBalances": [AssetBalanceData.from_dict(_item) for _item in obj.get("assetBalances")] if obj.get("assetBalances") is not None else None,
            "config": obj.get("config")
        })
        return _obj


