# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class BasicAppData(BaseModel):
    """
    BasicAppData
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Id of the app")
    name: Optional[StrictStr] = Field(default=None, description="Name given to the app when it was created")
    store_id: Optional[StrictStr] = Field(default=None, description="Id of the store to which the app belongs", alias="storeId")
    created: Optional[StrictInt] = Field(default=None, description="UNIX timestamp for when the app was created")
    app_type: Optional[StrictStr] = Field(default=None, description="Type of the app which was created", alias="appType")
    archived: Optional[StrictBool] = Field(default=False, description="If true, the app does not appear in the apps list by default.")
    __properties: ClassVar[List[str]] = ["id", "name", "storeId", "created", "appType", "archived"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of BasicAppData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if archived (nullable) is None
        # and model_fields_set contains the field
        if self.archived is None and "archived" in self.model_fields_set:
            _dict['archived'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of BasicAppData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "storeId": obj.get("storeId"),
            "created": obj.get("created"),
            "appType": obj.get("appType"),
            "archived": obj.get("archived") if obj.get("archived") is not None else False
        })
        return _obj


