# coding: utf-8

"""
    BTCPay Greenfield API

    A full API to use your BTCPay Server

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictBool, StrictStr

from typing import List, Optional


from btcpay_greenfield_py.api_client import ApiClient
from btcpay_greenfield_py.api_response import ApiResponse
from btcpay_greenfield_py.rest import RESTResponseType


class AuthorizationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_keys_authorize(
        self,
        permissions: Annotated[Optional[List[StrictStr]], Field(description="The permissions to request. (See API Key authentication)")] = None,
        strict: Annotated[Optional[StrictBool], Field(description="If permissions are specified, and strict is set to false, it will allow the user to reject some of permissions the application is requesting.")] = None,
        application_identifier: Annotated[Optional[StrictStr], Field(description="If specified, BTCPay Server will check if there is an existing API key associated with the user that also has this application identifier, redirect host AND the permissions required match(takes selectiveStores and strict into account). `applicationIdentifier` is ignored if redirect is not specified.")] = None,
        selective_stores: Annotated[Optional[StrictBool], Field(description="If the application is requesting the CanModifyStoreSettings permission and selectiveStores is set to true, this allows the user to only grant permissions to selected stores under the user's control.")] = None,
        application_name: Annotated[Optional[StrictStr], Field(description="The name of your application")] = None,
        redirect: Annotated[Optional[StrictStr], Field(description="The url to redirect to after the user consents, with the query parameters appended to it: permissions, user-id, api-key. If not specified, user is redirected to their API Key list.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Authorize User

        Redirect the browser to this endpoint to request the user to generate an api-key with specific permissions

        :param permissions: The permissions to request. (See API Key authentication)
        :type permissions: List[str]
        :param strict: If permissions are specified, and strict is set to false, it will allow the user to reject some of permissions the application is requesting.
        :type strict: bool
        :param application_identifier: If specified, BTCPay Server will check if there is an existing API key associated with the user that also has this application identifier, redirect host AND the permissions required match(takes selectiveStores and strict into account). `applicationIdentifier` is ignored if redirect is not specified.
        :type application_identifier: str
        :param selective_stores: If the application is requesting the CanModifyStoreSettings permission and selectiveStores is set to true, this allows the user to only grant permissions to selected stores under the user's control.
        :type selective_stores: bool
        :param application_name: The name of your application
        :type application_name: str
        :param redirect: The url to redirect to after the user consents, with the query parameters appended to it: permissions, user-id, api-key. If not specified, user is redirected to their API Key list.
        :type redirect: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_keys_authorize_serialize(
            permissions=permissions,
            strict=strict,
            application_identifier=application_identifier,
            selective_stores=selective_stores,
            application_name=application_name,
            redirect=redirect,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_keys_authorize_with_http_info(
        self,
        permissions: Annotated[Optional[List[StrictStr]], Field(description="The permissions to request. (See API Key authentication)")] = None,
        strict: Annotated[Optional[StrictBool], Field(description="If permissions are specified, and strict is set to false, it will allow the user to reject some of permissions the application is requesting.")] = None,
        application_identifier: Annotated[Optional[StrictStr], Field(description="If specified, BTCPay Server will check if there is an existing API key associated with the user that also has this application identifier, redirect host AND the permissions required match(takes selectiveStores and strict into account). `applicationIdentifier` is ignored if redirect is not specified.")] = None,
        selective_stores: Annotated[Optional[StrictBool], Field(description="If the application is requesting the CanModifyStoreSettings permission and selectiveStores is set to true, this allows the user to only grant permissions to selected stores under the user's control.")] = None,
        application_name: Annotated[Optional[StrictStr], Field(description="The name of your application")] = None,
        redirect: Annotated[Optional[StrictStr], Field(description="The url to redirect to after the user consents, with the query parameters appended to it: permissions, user-id, api-key. If not specified, user is redirected to their API Key list.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Authorize User

        Redirect the browser to this endpoint to request the user to generate an api-key with specific permissions

        :param permissions: The permissions to request. (See API Key authentication)
        :type permissions: List[str]
        :param strict: If permissions are specified, and strict is set to false, it will allow the user to reject some of permissions the application is requesting.
        :type strict: bool
        :param application_identifier: If specified, BTCPay Server will check if there is an existing API key associated with the user that also has this application identifier, redirect host AND the permissions required match(takes selectiveStores and strict into account). `applicationIdentifier` is ignored if redirect is not specified.
        :type application_identifier: str
        :param selective_stores: If the application is requesting the CanModifyStoreSettings permission and selectiveStores is set to true, this allows the user to only grant permissions to selected stores under the user's control.
        :type selective_stores: bool
        :param application_name: The name of your application
        :type application_name: str
        :param redirect: The url to redirect to after the user consents, with the query parameters appended to it: permissions, user-id, api-key. If not specified, user is redirected to their API Key list.
        :type redirect: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_keys_authorize_serialize(
            permissions=permissions,
            strict=strict,
            application_identifier=application_identifier,
            selective_stores=selective_stores,
            application_name=application_name,
            redirect=redirect,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_keys_authorize_without_preload_content(
        self,
        permissions: Annotated[Optional[List[StrictStr]], Field(description="The permissions to request. (See API Key authentication)")] = None,
        strict: Annotated[Optional[StrictBool], Field(description="If permissions are specified, and strict is set to false, it will allow the user to reject some of permissions the application is requesting.")] = None,
        application_identifier: Annotated[Optional[StrictStr], Field(description="If specified, BTCPay Server will check if there is an existing API key associated with the user that also has this application identifier, redirect host AND the permissions required match(takes selectiveStores and strict into account). `applicationIdentifier` is ignored if redirect is not specified.")] = None,
        selective_stores: Annotated[Optional[StrictBool], Field(description="If the application is requesting the CanModifyStoreSettings permission and selectiveStores is set to true, this allows the user to only grant permissions to selected stores under the user's control.")] = None,
        application_name: Annotated[Optional[StrictStr], Field(description="The name of your application")] = None,
        redirect: Annotated[Optional[StrictStr], Field(description="The url to redirect to after the user consents, with the query parameters appended to it: permissions, user-id, api-key. If not specified, user is redirected to their API Key list.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Authorize User

        Redirect the browser to this endpoint to request the user to generate an api-key with specific permissions

        :param permissions: The permissions to request. (See API Key authentication)
        :type permissions: List[str]
        :param strict: If permissions are specified, and strict is set to false, it will allow the user to reject some of permissions the application is requesting.
        :type strict: bool
        :param application_identifier: If specified, BTCPay Server will check if there is an existing API key associated with the user that also has this application identifier, redirect host AND the permissions required match(takes selectiveStores and strict into account). `applicationIdentifier` is ignored if redirect is not specified.
        :type application_identifier: str
        :param selective_stores: If the application is requesting the CanModifyStoreSettings permission and selectiveStores is set to true, this allows the user to only grant permissions to selected stores under the user's control.
        :type selective_stores: bool
        :param application_name: The name of your application
        :type application_name: str
        :param redirect: The url to redirect to after the user consents, with the query parameters appended to it: permissions, user-id, api-key. If not specified, user is redirected to their API Key list.
        :type redirect: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_keys_authorize_serialize(
            permissions=permissions,
            strict=strict,
            application_identifier=application_identifier,
            selective_stores=selective_stores,
            application_name=application_name,
            redirect=redirect,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_keys_authorize_serialize(
        self,
        permissions,
        strict,
        application_identifier,
        selective_stores,
        application_name,
        redirect,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
            'permissions': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if permissions is not None:
            
            _query_params.append(('permissions', permissions))
            
        if strict is not None:
            
            _query_params.append(('strict', strict))
            
        if application_identifier is not None:
            
            _query_params.append(('applicationIdentifier', application_identifier))
            
        if selective_stores is not None:
            
            _query_params.append(('selectiveStores', selective_stores))
            
        if application_name is not None:
            
            _query_params.append(('applicationName', application_name))
            
        if redirect is not None:
            
            _query_params.append(('redirect', redirect))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'text/html'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api-keys/authorize',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


